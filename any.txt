<TextForm  heading="Text Analyzer"/>
<About />
//import logo from './logo.svg';
import './App.css';
import Navbar from './Components/Navbar';
import TextForm from './Components/TextForm';
import React, { useState } from 'react';
import About from './Components/About';
import Alert from './Components/Alert';
//import React from "react";
import {
BrowserRouter as Router,
  Switch,
Route,
} from "react-router-dom";
function App() {
  const [mode,setMode] = useState('light');
  const [alert,setAlert]=useState();
  
  const sAlert = (message, type) =>{
    setAlert({
      msg : message,
      type : type
      
    })
    setTimeout(() => {
      setAlert(null);
    }, 1500);
  }
  const toggleMode = ()=>{
    if(mode === 'light'){
      setMode('dark');
      document.body.style.backgroundColor = 'gray';
      sAlert("Dark Mode HAs Been ENabled", "success");
    }
    else{
      setMode('light');
      document.body.style.backgroundColor = 'white';
      sAlert("Light Mode HAs been Enabled", "success");
    }
  }
    const togglegreen = () =>{
      if(mode === 'light'){
        document.body.style.backgroundColor = 'green';
        sAlert("Youve Entered Green Mode", "success");

      }
      else{
        setMode('light');
        sAlert("Light Mode Has Been Enabled");
      }
    }
  
  return (
  <>
  <Router>
  <Navbar title="TextUtils Blog"  mode={mode} toggleMode={toggleMode} togglegreen={togglegreen}/>
  
    <Alert  alert={alert} />
    <div className="container mx-3">
      
      <Switch>
      <Route exact path="/about">
            <About />
          </Route>
  
          <Route exact path="/">
          {<TextForm sAlert={sAlert} heading="Text Analyzer" mode={mode} />}
                
          </Route>
        </Switch>
    </div>
    </Router>
    
  </> 
    
  );
}

export default App;  






import React from 'react'

export default function About(props) {

   // const [myStyle, setMyStyle] = useState({
     //   color: 'black',
        //backgroundColor: 'white'
    //})
    let myStyle = {
       
        backgroundColor: props.mode === 'dark'? '#042743':'white'
    }
    
    
    
    return (
        <div className="container" style={{color: props.mode === 'dark'? 'white':'#042743'}}>
            <h1 className="my-3">About Us</h1>
            <div className="accordion" id="accordionExample">
                <div className="accordion-item">
                    <h2 className="accordion-header" id="headingOne">
                    <button className="accordion-button" type="button" style={myStyle} data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Accordion Item #1
                    </button>
                    </h2>
                    <div id="collapseOne" className="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                    <div className="accordion-body" style={myStyle}>
                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                    </div>
                    </div>
                </div>
                <div className="accordion-item" style={myStyle}>
                    <h2 className="accordion-header" id="headingTwo">
                    <button className="accordion-button collapsed" style={myStyle} type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                        Accordion Item #2
                    </button>
                    </h2>
                    <div id="collapseTwo" className="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                    <div className="accordion-body" style={myStyle}>
                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                    </div>
                    </div>
                </div>
                <div className="accordion-item">
                    <h2 className="accordion-header" id="headingThree">
                    <button className="accordion-button collapsed" style={myStyle} type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                        Accordion Item #3
                    </button>
                    </h2>
                    <div id="collapseThree" className="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                    <div className="accordion-body" style={myStyle}>
                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                    </div>
                    </div>
                </div>
                </div>
                </div>
    )
}
